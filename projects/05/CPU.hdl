// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	// D is loaded with the ALU output when d2 is set and it is a C-instruction
	And(a=instruction[4], b=instruction[15], out=dload);
	DRegister(in=aluout, load=dload, out=d);
	// A is loaded with the instruction when it is an A-instruction or the ALU output when d1 is set and it is a C-instruction
	Mux16(a=instruction, b=aluout, sel=instruction[15], out=ain);
	Not(in=instruction[15], out=ainstruction);
	And(a=instruction[5], b=instruction[15], out=cinstructionaload);
	Or(a=ainstruction, b=cinstructionaload, out=aload);
	ARegister(in=ain, load=aload, out=a);
	// The ALU takes in D, and A or M depending on the a-bit
	// The ALU computes a function depending on the c-bits
	Mux16(a=a, b=inM, sel=instruction[12], out=aorm);
	ALU(x=d, y=aorm, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluout, zr=zr, ng=ng);
	And16(a=aluout, b=true, out=outM);
	// M is loaded with the ALU output when d3 is set and it is a C-instruction
	And(a=instruction[3], b=instruction[15], out=writeM);
	And16(a=a, b=true, out[0..14]=addressM);
	// Jump when j1 is set and the ALU output is negative, or j2 is set and the ALU output is zero, or j3 is set and the ALU output is positive
	// AND it is a C-instruction
	And(a=ng, b=instruction[2], out=ngjump);
	And(a=zr, b=instruction[1], out=zrjump);
	Not(in=ng, out=nn);
	Not(in=zr, out=nz);
	And(a=nn, b=nz, out=ps);
	And(a=ps, b=instruction[0], out=psjump);
	Or(a=ngjump, b=zrjump, out=ngzrjump);
	Or(a=ngzrjump, b=psjump, out=ngzrpsjump);
	And(a=ngzrpsjump, b=instruction[15], out=jump);
    PC(in=a, load=jump, inc=true, reset=reset, out[0..14]=pc);
}